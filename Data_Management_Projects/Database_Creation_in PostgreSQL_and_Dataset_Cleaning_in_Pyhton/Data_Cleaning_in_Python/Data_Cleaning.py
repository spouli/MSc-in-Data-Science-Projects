#!/usr/bin/env python
# coding: utf-8

# In[5]:


import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings("ignore")

authors = pd.read_json('C:/Users/stavp/Desktop/Stavroula/Msc/Data mngmt mini project/goodreads_book_authors.json', lines=True)


# In[399]:


reviews = pd.read_json('C:/Users/stavp/Desktop/Stavroula/Msc/Data mngmt mini project/goodreads_reviews_children.json', lines=True)


# In[10]:


bookinfo = pd.read_json('C:/Users/stavp/Desktop/Stavroula/Msc/Data mngmt mini project/goodreads_books_children.json', lines=True)


# In[18]:


authors.head()


# In[697]:


# In these steps we create the needed columns for the table authors 
authors_08 = pd.DataFrame(columns=['author_id', 'gender', 'nationality', 'author_name'])
from faker import Faker
faker=Faker()

nationalities = []
gender = []
author_ids = []
author_names = []

# Get the first 4000 authors
for i in range(4000):
    
    # Insert the author only if he/she has not been already inserted
    if authors['author_id'][i] not in author_ids:
        author_ids.append(authors['author_id'][i])
        gender.append(str(faker.random_elements(elements=('Male', 'Female'), length=1, unique=True))[2:-2])
        nationalities.append(faker.country().replace("'", ""))
        author_names.append(authors['name'][i].replace("'", "")) 

# Assign the 4000 authors and their details to the created dataframe
authors_08['gender'] = gender
authors_08['nationality'] = nationalities
authors_08['author_id'] = author_ids
authors_08['author_name'] = author_names




# In[698]:


# Here we generate the sql insertion command for the table authors
default_sql_authors = "INSERT INTO schema_08.authors_08(author_id,nationality,gender, author_name) VALUES("

# Write the insert commands on a txt file ready for execution
with open('sql-statements.txt', 'a') as data:
    for i in range(len(authors_08)):
        completed_statement = default_sql_authors + str(authors_08['author_id'][i]) + ",'" +  authors_08['nationality'][i] + "', '" + authors_08['gender'][i] + "', '" + authors_08['author_name'][i] + "'); \n" 
        data.write(completed_statement)


# In[699]:


# Here we create the nessecary columns for the publishers table. Some data we retrieve it from 
# the given dataset and some of them are being generated by faker
publishers_08 = pd.DataFrame(columns=['publisher_id', 'publisher_name', 'address', 'headquarters_country', 'contact_phone'])
from faker import Faker
faker=Faker()

address = []
headquarters = []
contact_phone = []
pub_names = []
pub_id = []

y = 0 # we need it to stop on the first 4000 publisher with no empty name
for i in range(len(bookinfo)):
    if y == 4000:
        break
    if bookinfo['publisher'][i] != "":
        if bookinfo['publisher'][i] not in pub_names:
            pub_names.append(bookinfo['publisher'][i].replace("'", ""))
            address.append(faker.street_name())
            headquarters.append(faker.country().replace("'", ""))
            contact_phone.append(faker.random_number(digits=10))
            pub_id.append(y+1)
            y = y + 1

# Assign the 4000 publishres and their details to the created dataframe
publishers_08['address'] = address
publishers_08['headquarters_country'] = headquarters
publishers_08['contact_phone'] = contact_phone
publishers_08['publisher_name'] = pub_names
publishers_08['publisher_id'] = pub_id


# In[700]:


# Create the sql insertion commands for the table publishers
default_sql_publishers = "INSERT INTO schema_08.publishers_08(publisher_id,publisher_name,address,headquarters_country, contact_phone) VALUES("

# Write the insert commands on a txt file ready for execution
with open('sql-statements.txt', 'a') as data:
    for i in range(len(authors_08)):
        completed_statement = default_sql_publishers + "'" + str(publishers_08['publisher_id'][i]) + "','" + publishers_08['publisher_name'][i] + "','" +  publishers_08['address'][i] + "', '" + publishers_08['headquarters_country'][i] + "', '" + str(publishers_08['contact_phone'][i])+ "'); \n" 
        data.write(completed_statement)


# In[701]:


books_08 = pd.DataFrame(columns=['book_isbn', 'publisher_id', 'title', 'publication_year', 'price'])
from faker import Faker
faker=Faker()

prices = []
book_isbns = []
titles = []
publication_years = []
publisher_ids = []

y = 0 # we need it to stop on the first 100 books with no empty isbn and len digits = 10
for i in range(len(bookinfo)):
    if y == 100:
        break
        
    # Get the valid isbns    
    if bookinfo['isbn'][i] != "" and len(bookinfo['isbn'][i]) == 10:
        
        # We want unique
        if bookinfo['isbn'][i] not in book_isbns:
            
            # Get the publisher name and only if you found it add the book to the table of books
            for j in range (len(publishers_08)):
                if publishers_08["publisher_name"][j] == bookinfo['publisher'][i]:
                    publisher_ids.append(publishers_08['publisher_id'][j])

                    prices.append(faker.random_number(digits=2))
                    book_isbns.append(bookinfo['isbn'][i])
                    titles.append(bookinfo['title'][i].replace("'", ""))
                    publication_years.append(bookinfo['publication_year'][i])

                    y = y + 1
    
books_08['price'] = prices
books_08['book_isbn'] = book_isbns
books_08['title'] = titles
books_08['publication_year'] = publication_years
books_08['publisher_id'] = publisher_ids


# In[702]:


# Create the sql insertion commands for the table books
default_sql_books = "INSERT INTO schema_08.books_08(book_isbn,title,publication_year, publisher_id, price) VALUES("

# Write the insert commands on a txt file ready for execution
with open('sql-statements.txt', 'a', encoding="utf-8") as data:
    for i in range(len(books_08)):
        completed_statement = default_sql_books + "'" + books_08['book_isbn'][i] + "','" +  str(books_08['title'][i]) + "', '" + books_08['publication_year'][i] + "', '" + str(books_08['publisher_id'][i]) + "', '" + str(books_08['price'][i])+"'); \n" 
        data.write(completed_statement)


# In[703]:


default_sql_booksAuthors = "INSERT INTO schema_08.booksAuthors_08(author_id,book_isbn,author_role) VALUES("

# Write the insert commands on a txt file ready for execution
with open('sql-statements.txt', 'a', encoding="utf-8") as data:
    for i in range(len(books_08)):
        
        # Get the author for each stored book in our new dataframe
        row = bookinfo[bookinfo['isbn'] == books_08['book_isbn'][i]]
        
        # If there are many authors get their values
        for j in row['authors']:
            
            # Loop the array of the authors
            for r in j:
                
                # IF the role is empty generate a random one
                role = r['role'] if r['role'] != '' else str(faker.random_elements(elements=('Writer', 'Illustrations', 'Other'), length=1, unique=True))[2:-2]
                author_id = r['author_id']
               
                completed_statement = default_sql_booksAuthors + "'" + str(author_id) + "','" +  str(books_08['book_isbn'][i]) + "', '" + role +"'); \n" 
                data.write(completed_statement)


# In[704]:


from datetime import datetime

# Initialize the dataframe with the columns of the database table reviews
updated_reviews_08 = pd.DataFrame(columns=['review_id', 'nickname', 'date_created', 'review_score', 'book_isbn', 'description'])

# Initialized the temporary lists
nicknames= []
review_ids= []
dates_created= []
review_scores= []
book_isbns = []
descriptions = []



default_sql_reviews = "INSERT INTO schema_08.reviews_08(review_id,nickname,date_created, revie_score, book_isbn, description) VALUES("


for i in range(len(books_08)):
    # Get the review for each stored book in our new dataframe
    row_of_book = bookinfo[bookinfo['isbn'] == books_08['book_isbn'][i]]
    
    # Then get the reviews for these specific book_id
    reviews_result = reviews[reviews['book_id'] == list(row_of_book['book_id'])[0]]
    
    # Append the retrived values to the lists
    # Here we used the list type to convert the reviews_result results to a list so if a book have multiple review
    # loop on each of them and added it to the dataframe
    for j in range (len(list(reviews_result['review_id']))):
        if list(reviews_result['rating'])[j] > 0:
            review_ids.append(list(reviews_result['review_id'])[j])
            dates_created.append(datetime.strptime(list(reviews_result['date_added'])[j], '%a %b %d %H:%M:%S %z %Y'))
            review_scores.append(list(reviews_result['rating'])[j])
            descriptions.append(list(reviews_result['review_text'])[j].replace("'", ""))
            book_isbns.append(list(row_of_book['isbn'])[0])
            nicknames.append(faker.first_name() + list(reviews_result['review_id'])[j][0:3])

# Assign the created lists to the dataframe, so next we can create the sql statements 
updated_reviews_08['review_id'] = review_ids
updated_reviews_08['nickname'] = nicknames
updated_reviews_08['date_created'] = dates_created
updated_reviews_08['review_score'] = review_scores
updated_reviews_08['book_isbn'] = book_isbns
updated_reviews_08['description'] = descriptions



# In[705]:


# Create the sql insertion commands for the table books
default_sql_reviews = "INSERT INTO schema_08.reviews_08(review_id, nickname, date_created, review_score, book_isbn, description) VALUES("

# Write the insert commands on a txt file ready for execution
with open('sql-statements.txt', 'a', encoding="utf-8") as data:
    for i in range(len(updated_reviews_08)):
        completed_statement = default_sql_reviews + "'" + str(updated_reviews_08['review_id'][i]) + "','" +  updated_reviews_08['nickname'][i] + "', '{" + str(updated_reviews_08['date_created'][i]) + "}', '" + str(updated_reviews_08['review_score'][i]) + "', '" + str(updated_reviews_08['book_isbn'][i])+ "', '" + str(updated_reviews_08['description'][i])+"'); \n" 
        data.write(completed_statement)

